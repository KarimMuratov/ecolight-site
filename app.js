// app.js ‚Äî —Å–µ—Ä–≤–µ—Ä —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite

const express = require('express');
const bodyParser = require('body-parser');
const nodemailer = require('nodemailer');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();
const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname, 'public')));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
const db = new sqlite3.Database('database.db', (err) => {
  if (err) return console.error(err.message);
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ SQLite');
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
db.run(`CREATE TABLE IF NOT EXISTS orders (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  phone TEXT NOT NULL,
  service TEXT NOT NULL,
  comment TEXT,
  created_at TEXT DEFAULT CURRENT_TIMESTAMP
)`);

// –†–æ—É—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
app.post('/send', (req, res) => {
  const { name, phone, service, comment } = req.body;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
  const sql = 'INSERT INTO orders (name, phone, service, comment) VALUES (?, ?, ?, ?)';
  db.run(sql, [name, phone, service, comment], function (err) {
    if (err) {
      console.error(err.message);
      return res.status(500).send('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.');
    }
    console.log(`üìù –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (ID ${this.lastID})`);

    // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—á—Ç—ã
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'your_email@gmail.com',
        pass: 'your_app_password'
      }
    });

    const mailOptions = {
      from: 'your_email@gmail.com',
      to: 'admin@example.com',
      subject: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –≠–ö–û–õ–ê–ô–§',
      html: `<p>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</p><ul>
        <li>–ò–º—è: ${name}</li>
        <li>–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}</li>
        <li>–£—Å–ª—É–≥–∞: ${service}</li>
        <li>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}</li></ul>`
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ—á—Ç—ã:', error);
      } else {
        console.log('‚úâ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ email:', info.response);
      }
    });

    res.send('<h1>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!</h1><p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>');
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
